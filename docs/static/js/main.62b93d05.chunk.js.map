{"version":3,"sources":["helpers/analyzeImage.js","ImageDetectorApp.js","index.js"],"names":["analyzeImage","img","a","ml5","model","classify","document","getElementById","results","ImageDetectorApp","btn","useRef","useState","dataImage","setDataImage","loading","prediction","setPrediction","label","confidence","useEffect","then","res","id","src","alt","style","maxWidth","type","onClick","current","addEventListener","image","target","files","readear","FileReader","onload","result","readAsDataURL","ref","ReactDOM","render"],"mappings":"4PAGaA,EAAY,uCAAG,WAAMC,GAAN,iBAAAC,EAAA,sEAEJC,kBAAoB,aAFhB,cAElBC,EAFkB,gBAGFA,EAAMC,SAASC,SAASC,eAAe,QAHrC,cAGlBC,EAHkB,yBAKjBA,EAAQ,IALS,2CAAH,sDCiDVC,EAhDU,WAErB,IAAMC,EAAMC,iBAAO,WAFQ,EAGOC,mBAAS,MAHhB,mBAGpBC,EAHoB,KAGTC,EAHS,OAISF,mBAAS,CAAEG,SAAS,IAJ7B,mBAIpBC,EAJoB,KAIRC,EAJQ,KAKnBC,EAA+BF,EAA/BE,MAAOC,EAAwBH,EAAxBG,WAAYJ,EAAYC,EAAZD,QA4B3B,OAXAK,qBAAU,WACFP,GACAb,IAAeqB,MAAK,SAAAC,GAChBL,EAAc,aACVF,SAAS,GACNO,SAIhB,CAACT,IAGA,6BAEI,yBAAKU,GAAG,MAAMC,IAAOX,GAAa,+BAA4CY,IAAI,SAASC,MAAO,CAAEC,SAAU,QAC3GZ,GAAY,sCAAQG,EAAR,mBAAkC,IAAbC,EAArB,MAEf,2BACIS,KAAK,OACLC,QAlCQ,WAEhBnB,EAAIoB,QAAQC,iBAAiB,UAAU,YAAiB,IAC9CC,EAD6C,EAAbC,OACjBC,MAAM,GAEvBC,EAAU,IAAIC,WAElBD,EAAQE,OAAU,YAAiB,IAAdJ,EAAa,EAAbA,OACjBnB,EAAamB,EAAOK,SAExBH,EAAQI,cAAcP,OAyBlBQ,IAAK9B,MCxCrB+B,IAASC,OAEL,kBAAC,EAAD,MAEFpC,SAASC,eAAe,W","file":"static/js/main.62b93d05.chunk.js","sourcesContent":["\r\nimport * as ml5 from 'ml5'\r\n\r\nexport const analyzeImage = async(img) => {\r\n   \r\n    const model = await ml5.imageClassifier('MobileNet');\r\n    const results = await model.classify(document.getElementById(\"img\"))\r\n\r\n    return results[0];\r\n}","import React, { useEffect, useRef, useState } from 'react';\r\nimport * as ml5 from 'ml5'\r\nimport { analyzeImage } from './helpers/analyzeImage';\r\n\r\nconst ImageDetectorApp = () => {\r\n\r\n    const btn = useRef(\"btn-add\")\r\n    const [dataImage, setDataImage] = useState(null);\r\n    const [prediction, setPrediction] = useState({ loading: true });\r\n    const { label, confidence, loading } = prediction\r\n\r\n    const handleClick = () => {\r\n\r\n        btn.current.addEventListener('change', ({ target }) => {\r\n            const image = target.files[0]\r\n\r\n            let readear = new FileReader()\r\n\r\n            readear.onload = (({ target }) => {\r\n                setDataImage(target.result)\r\n            })\r\n            readear.readAsDataURL(image)\r\n\r\n        })\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (dataImage) {\r\n            analyzeImage().then(res => {\r\n                setPrediction({\r\n                    loading: false,\r\n                    ...res\r\n                })\r\n            })\r\n        }\r\n    }, [dataImage]);\r\n\r\n    return (\r\n        <div>\r\n\r\n            <img id=\"img\" src={(!dataImage) ? \"./assets/images/img-icon.png\" : dataImage} alt=\"Imagen\" style={{ maxWidth: 450 }} />\r\n            {(!loading) && <h4>{`${label} --> ${confidence * 100}%`}</h4>}\r\n\r\n            <input\r\n                type=\"file\"\r\n                onClick={handleClick}\r\n                ref={btn}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ImageDetectorApp;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport ImageDetectorApp from './ImageDetectorApp';\n\n\nReactDOM.render(\n  \n    <ImageDetectorApp />,\n \n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}